select(<program>→<mainkey>(){<declarative_sequence><statement_sequence>}) = {main}

select(<declarative_sequence>→<declarative_statement><declarative_sequence>) = {int}

select(<declarative_sequence>→null) = {},if,while,for,scanf,printf,{,identifier}

select(<declarative_statement>→<intkey><identifier_table>;) = {int}

select(<identifier_table>→<identifier><identifier_table_second>) = {identier}

select(<identifier_table_second>→,<identifier_table>) = {,}

select(<identifier_table_second> -> null) = {;}

select(<statement_sequence>→<sentence><statement_sequence>) = {if,while,for,scanf,print,{,number}

select(<statement_sequence> → null) = {}}

select(<sentence>→<if_sentence>) = {if}

select(<sentence>→<while_sentence>) = {while}

select(<sentence>→<for_sentence>) = {for}

select(<sentence>→<scanf_sentence>) = {scanf}

select(<sentence>→<printf_sentence>) = {printf}

select(<sentence>→<compound_statement>) = {{}

select(<sentence>→<assignment_statement>) = {id,number,(}

select(<if_sentence>→<ifkey> (<expression>)<compound_statement><else_sentence>) = {if}

select(<else_sentence>→<eleskey><compound_statement>) = {else}

select(<else_sentence>→null) = {;}

select(<while_sentence>→<whilekey> (<expression>)<compound_statement>) = {while}

select(<for_sentence>→<forkey> (<expression>;<expression>;<expression>) <compound_statement>) = {for}

select(<compound_statement>→{<statement_sequence>}) = {{}

select(<assignment_statement>→<expression>;) = {identifier,unint,(}

select(<expression>→<identifier><expression_s>) = {id}

select(<expression_s>→=<arithmetic_expression>) = {=}

select(<expression_s>→<rel>) = {>,<,>=,<=,==,!=,;,)}

select(<rel>→<opt><relational_operator><arithmetic_expression>) = {+,-,*,/,>,<,>=,<=,==,!=}

select(<rel>→null)={;,)}

select(<opt>→+<arithmetic_expression>) = {+}

select(<opt>→-<arithmetic_expression>) = {-}

select(<opt>→*<term>) = {*}

select(<opt>→/<term>) = {/}

select(<opt>→null) = {<,>,<=,>=,!=,==};
-------------------------------------------------

select(<relational_operator>→>)={>}

select(<relational_operator>→<)={<}

select(<relational_operator>→>=)={>=}

select(<relational_operator>→<=)={<=}

select(<relational_operator>→==)={==}

select(<relational_operator>→!=)={!=}

//select(<relational_operator>→><eq>)={>}

//select(<relational_operator>→<<eq>)={<}

//select(<relational_operator>→=<eq>)={=}

//select(<relational_operator>→!<eq>)={!}

//select(<eq>→=)={=}

//select(<eq>→null)={id,unint,(}

select(<arithmetic_expression>→<term><oparit>)={id,unint,(}

select(<oparit>→+<arithmetic_expression>)={+}

select(<oparit>→-<arithmetic_expression>)={-}

select(<oparit>→null)={<,>,<=,>=,!=,==,),;}

select(<term>→<factor><opterm>)={id,unint,(}

select(<opterm>→*<term>) = {*}

select(<opterm>→/<term>) = {/}

select(<opterm>→null) = {+,-,<,>,=,!,;,)}

select(<factor>→<identifier>) = {id}

select(<factor>→<unint>)={unint}

select(<factor>→(<arithmetic_expression>)) = {(}
------------------------------------

select(<scanf_sentence>→<scanfkey>("<scan>);)={scanf}

select(<scan>→%d<scans>&<identifier>)={%}

select(<scans>→%d<scans>&<identifier>,)={%}

select(<scans>→")={"}

select(<printf_sentence>→<printfkey>("<prints>);)={printf}

select(<prints>→<char><prints>)={任意字符}

select(<prints>→%d<prin>&<identifier>)={%}

select(<prints>→")={"}

select(<prin>→%d<prin>&<identifier>,)={%}

select(<prin>→")={"}