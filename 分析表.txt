select(<program>→<mainkey>(){<declarative_sequence><statement_sequence>}) = {main}
{Program.code = DeclarationSequence.code}

select(<declarative_sequence>→<declarative_statement><declarative_sequence>) = {int}

select(<declarative_sequence>→null) = {},if,while,for,scanf,printf,{,letter}

select(<declarative_statement>→<intkey><identifier_table>;) = {int}

select(<identifier_table>→<identifier><idts>) = {letter}

select(<idts>→,<identifier_table>) = {","}

select(<idts> -> null) = {;}

select(<statement_sequence>→<sentence><statement_sequence>) = {if,while,for,scanf,print,{,letter}
{StatementSequence.code = Sentence.code || StatementSequence.code}

select(<statement_sequence> → null) = {}}
{}

select(<sentence>→<if_sentence>) = {if}
{sentence.code = IfSentence.code}

select(<sentence>→<while_sentence>) = {while}

select(<sentence>→<for_sentence>) = {for}
{sentence.code = ForSentence.code}

select(<sentence>→<scanf_sentence>) = {scanf}
{sentence.code = ScanfSentence.code}

select(<sentence>→<printf_sentence>) = {printf}
{sentence.code = PrintfSentence.code}

select(<sentence>→<compound_statement>) = {{}
{sentence.code = CompoundStatement.code}

select(<sentence>→<assignment_statement>) = {id,unint,(}
{sentence.code = AssignmentStatement.code}

select(<if_sentence>→<ifkey> (
{expression.true = NewLabel() expression.false = NewLabel()}<expression>)
<compound_statement><elses>;
{IfSentence.code = expression.code || "expression.true :" || CompoundStatement.code ||
                   "expression.false :" || ElseSentence.code}
) = {if}

select(<elses>→<eleskey><compound_statement>) = {else}

select(<elses>→null) = {},for,while,if,scanf,printf,{,id}

select(<while_sentence>→<whilekey> (
{expression.true = NewLabel(); expression.false = WhileSentence.next}<expression>)
<compound_statement>
{WhileSentence.code = expression.code || "expression.true :" || CompoundStatement}
;) = {while}

select(<for_sentence>→<forkey> (<expression>;<expression>;<expression>) <compound_statement>;) = {for}

select(<compound_statement>→{<statement_sequence>}) = {{}

select(<assignment_statement>→<expression>;) = {id,number,(}

select(<expression>→<identifier><exps>) = {id}

select(<exps>→=<arithmetic_expression>) = {=}

select(<exps>→<rel>) = {+,-,*,/,>=,<=>,<,==,!=,;,)}

select(<rel>→<opt><relational_operator><arithmetic_expression>) = {+,-,*,/,>,<,>=,<=,==,!=}

select(<opt>→+<arithmetic_expression>) = {+}

select(<opt>→-<arithmetic_expression>) = {-}

select(<opt>→*<term>) = {*}

select(<opt>→/<term>) = {/}

select(<opt>→null) = {<,>,<=,>=,!=,==}

select(<rel>→null)={';',)}
--------------------------------------------------------------------------------------------------

select(<relational_operator>→>)={>}

select(<relational_operator>→<)={<}

select(<relational_operator>→>=)={>=}

select(<relational_operator>→<=)={<=}

select(<relational_operator>→==)={==}

select(<relational_operator>→!=)={!=}

//select(<relational_operator>→><eq>)={>}

//select(<relational_operator>→<<eq>)={<}

//select(<relational_operator>→=<eq>)={=}

//select(<relational_operator>→!<eq>)={!}

//select(<eq>→=)={=}

//select(<eq>→null)={id,unint,(}

select(<arithmetic_expression>→<term><oparit>)={id,number,(}

select(<oparit>→+<arithmetic_expression>)={+}

select(<oparit>→-<arithmetic_expression>)={-}

select(<oparit>→null)={<,>,<=,>=,!=,==,),;}

select(<term>→<factor><opterm>)={id,number,(}

select(<opterm>→*<term>) = {*}

select(<opterm>→/<term>) = {/}

select(<opterm>→null) = {+,-,<,>,=,!,;,)}

select(<factor>→<identifier>) = {id}

select(<factor>→<unint>)={number}

select(<factor>→(<arithmetic_expression>)) = {(}
------------------------------------

select(<scanf_sentence>→<scanfkey>(id);)={scanf}

select(<printf_sentence>→<printfkey>(id);)={printf}